points(x, pred, col="blue", pch=2)
x
length(x)
points(x, pred$lwr, col="blue", pch=2)
class(pred)
pred
pred[,2]
points(x, pred[,2], col="blue", pch=2)
points(x, pred[,2], col="blue")
data(mtcars)
x = mtcars$wt
y = mtcars$mpg
newdata = data.frame(x = x)
newdata
fit = lm(y~x)
p1 = predict(fit, newdata, interval="confidence")
p1
plot(x, y, pch=21)
abline(fit)
lines(x, p1[,1], col = "red")
lines(x, p1[,2], col = "lightblue")
lines(x, p1[,3], col = "lightblue")
confint(fit)
summary(fit)
fit$coefficients
help(mtcars)
p2 = predict(fit, newdata=3000, interval="prediction")
newdata = data.frame(x=3000)
p2 = predict(fit, newdata, interval="prediction")
p2
plot(p2)
wt
x
newdata = data.frame(x=3)
p2 = predict(fit, newdata, interval="prediction")
p2
p3 = predict(fit, newdata=data.frame(x=2), interval="confidence")
p3
summary(fit)
37.2851-24.82389
plot(y~x)
fit
abline(fit)
fit2 = fit
fi2$coefficients[2] = 0
fit2$coefficients[2] = 0
summary(fit2)
abline(fit2)
fit2 = lm(data=data.frame(x=0, y=fit$coefficients[1]))
fit2
fit$soefficients[1]
fit$soefficients
fit$coefficients
fit$coefficients[1]
data = data.frame(x = 0, y = 37.28513)
data
fit(data)
lm(data)
data = data.frame(x = c(0,0), y = c(37.28513, 37.28513))
fit2 = lm(data=data)
fit2
plot(data)
data = data.frame(x = c(0,1), y = c(37.28513, 37.28513))
fit2 = lm(data=data)
plot(data)
fit2
abline(fit2)
lm(y~x, x = 0)
plot(y~x)
abline(fit)
abline(h=fit$coefficients[1])
plot(y~x, xlim=c(0,6))
abline(fit)
abline(h=fit$coefficients[1])
plot(y~x, xlim=c(0,6), ylim=c(0, 38))
abline(fit)
abline(h=fit$coefficients[1])
beta0 = fit$coefficients[1]
beta1 = fit$coefficients[2]
beta0
beta1
fit$residuals
resid = fit$residuals
resid
sum(resid)
sum(resid^2)
sum((y - beta0)^2)
278.3219/10586.88
beta0
beta1
resids
resid
y - beta1 * x - beta0
resid2 = y - beta0
resid2
sum(resid)
sum(resid2)
lm(y~beta0, x)
lm(y~beta0)
lm(y~rep(beta0, length(y)))
lm(y~rep(beta0, length(y)))$residuals
ss1 = sum(resid^2)
ss1
ss2 = sum(resid2^2)
ss1 / ss2
lm(y~my)
my = mean(y)
abline(my)
abline(h=my)
lm(y~my)
data = data.frame(x,y)
data
lm(y~my, data=data)
lm(y~rep(my, length(y)), data=data)
fit2 = lm(y~rep(my, length(y)), data=data)
abline(fit2)
abline(h = fit2)
summary(fit2)
fit2$residuals
resid2 = fit2$residuals
sum(resid2)
ss2 = sum(resid2 ^ 2)
ss2
ss1 / ss2
source('~/R/40k-test.R')
source('~/R/40k-test.R')
source('~/R/40k-test.R')
source('~/R/40k-test.R')
source('~/R/40k-test.R')
source('~/R/40k-test.R')
source('~/R/40k-test.R')
source('~/R/40k-test.R')
source('~/R/40k-test.R')
source('~/R/40k-test.R')
source('~/R/40k-test.R')
source('~/R/40k-test.R')
source('~/R/40k-test.R')
source('~/R/40k-test.R')
source('~/R/40k-test.R')
source('~/R/40k-test.R')
source('~/R/40k-test.R')
source('~/R/40k-test.R')
source('~/R/40k-test.R')
source('~/R/40k-test.R')
source('~/R/40k-test.R')
source('~/R/40k-test.R')
source('~/R/40k-test.R')
source('~/R/40k-test.R')
source('~/R/40k-test.R')
source('~/R/40k-test.R')
source('~/R/40k-test.R')
source('~/R/40k-test.R')
source('~/R/40k-test.R')
source('~/R/40k-test.R')
source('~/R/40k-test.R')
source('~/R/40k-test.R')
source('~/R/40k-test.R')
source('~/R/40k-test.R')
source('~/R/40k-test.R')
source('~/R/40k-test.R')
source('~/R/40k-test.R')
source('~/R/40k-test.R')
source('~/R/40k-test.R')
source('~/R/40k-test.R')
source('~/R/40k-test.R')
source('~/R/40k-test.R')
source('~/R/40k-test.R')
?setClass
source('~/R/40k-test.R')
source('~/R/40k-test.R')
View(models)
source('~/R/40k-test.R')
source('~/R/40k-test.R')
source('~/R/40k-test.R')
source('~/R/40k-test.R')
source('~/R/40k-test.R')
source('~/R/40k-test.R')
source('~/R/40k-test.R')
library("shiny", lib.loc="~/R/win-library/3.1")
library("shinyapps", lib.loc="~/R/win-library/3.1")
as.numeric("k")
as.integer("k")
?chartr
letters
Letters
letters
LETTERS
chartr(c(letters, LETTERS), 1:52, "Kendall Parks")
chartr("abcdefgh", 1:52, "Kendall Parks")
chartr("abcdefgh", as.character(1:8), "Kendall Parks")
as.character(1:8)
paste(as.character(1:8), sep="")
paste(as.character(1:8))
?paste
paste("k", "f", sep="")
as.character(1:8)
paste(as.character(1:8))
paste(paste(as.character(1:8)))
seq(1, 8)
as.character(seq(1, 8))
paste(as.character(seq(1, 8)))
seq(1,8, length.out = 1)
seq(1,8)
paste(seq(1,8))
c(seq(1,8))
paste(c(seq(1,8)))
as.character(c(seq(1,8)))
paste(as.character(c(seq(1,8))))
paste(seq(1,8), collapse = "")
paste(seq(1,52), collapse = "")
chartr(c(letters, LETTERS))
chartr(c(letters, LETTERS), paste(as.character(1:52), collapse="")
)
chartr(c(letters, LETTERS), paste(as.character(1:52), collapse=""), "Kendall Parks")
c(letters, LETTERS)
chartr(paste(c(letters, LETTERS), collapse=""), paste(as.character(1:52), collapse=""), "Kendall Parks")
paste(c(letters, LETTERS), collapse="")
paste(as.character(1:52), collapse="")
paste(as.character(1:52), collapse="", sep=" ")
paste(as.character(1:52), sep=" ")
paste(as.character(1:52), collapse=" ")
chartr(paste(c(letters, LETTERS), collapse=""), paste(as.character(1:52), collapse=" "), "Kendall Parks")
chartr(paste(c(letters, LETTERS), collapse=" "), paste(as.character(1:52), collapse=" "), "Kendall Parks")
paste(c(letters, LETTERS), collapse=" ")
paste(as.character(1:52), collapse=" ")
source('~/R/TEST.R')
paste(x)
strsplit(paste(x), '')
source('~/R/TEST.R')
t
source('~/R/TEST.R')
mtcars
x = mtcars$hp
y = mtcars$mpg
plot(y~x)
source('~/R/TEST.R')
mtcars[,2]
mtcars[,1]
source('~/R/TEST.R')
source('~/R/TEST.R')
dataset$mpg
source('~/R/TEST.R')
dataset$mpg
dataset$mpg[-1:2]
dataset$mpg[-1]
source('~/R/TEST.R')
source('~/R/TEST.R')
source('~/R/TEST.R')
source('~/R/TEST.R')
source('~/R/TEST.R')
source('~/R/TEST.R')
source('~/R/TEST.R')
source('~/R/TEST.R')
source('~/R/TEST.R')
source('~/R/TEST.R')
source('~/R/TEST.R')
source('~/R/TEST.R')
source('~/R/TEST.R')
source('~/R/TEST.R')
dataset$mpg
dataset
source('~/R/TEST.R')
dataset
dataset$mpg
dataset$mpg[-32]
source('~/R/TEST.R')
dataset
remove.point(32)
remove.point(32)$mpg
class(remove.point(32))
source('~/R/TEST.R')
remove.point
remove.point(32)
remove.point(32)$mpg
source('~/R/TEST.R')
source('~/R/TEST.R')
dataset$mpg
mtcars$mpg
source('~/R/TEST.R')
remove.point(1:10)
plot(remove.point(1:10))
source('~/R/TEST.R')
source('~/R/TEST.R')
source('~/R/TEST.R')
source('~/R/TEST.R')
source('~/R/TEST.R')
source('~/R/TEST.R')
source('~/R/TEST.R')
source('~/R/TEST.R')
source('~/R/TEST.R')
length(c(1, 2, 3, 4)) != length(25,22)
length(c(1, 2, 3, 4)) != length(c(25,22))
length(c(1, 2, 3, 4)) != length(c(25,22,1))
length(c(1, 2, 3, 4)) != length(c(25,22,1,2))
source('~/R/TEST.R')
source('~/R/TEST.R')
source('~/R/TEST.R')
source('~/R/TEST.R')
par(mfrow=c(1,1))
source('~/R/TEST.R')
source('~/Git/DevDataProd-Project/ui.R')
source('~/Git/DevDataProd-Project/server.R')
?shinyUI
help(shiny)
headerPanel("My Title", windowTitle = "My Window Title")
source('~/Git/DevDataProd-Project/ui.R')
source('~/Git/DevDataProd-Project/ui.R')
source('~/Git/DevDataProd-Project/ui.R')
source('~/Git/DevDataProd-Project/ui.R')
shiny::runApp('~/Git/DevDataProd-Project')
source('~/Git/DevDataProd-Project/ui.R')
shiny::runApp('~/Git/DevDataProd-Project')
shiny::runApp('~/Git/DevDataProd-Project')
source('~/Git/DevDataProd-Project/ui.R')
source('~/Git/DevDataProd-Project/ui.R')
shiny::runApp('~/Git/DevDataProd-Project')
source('~/Git/DevDataProd-Project/ui.R')
source('~/Git/DevDataProd-Project/ui.R')
shiny::runApp('~/Git/DevDataProd-Project')
source('~/Git/DevDataProd-Project/ui.R')
shiny::runApp('~/Git/DevDataProd-Project')
source('~/Git/DevDataProd-Project/ui.R')
shiny::runApp('~/Git/DevDataProd-Project')
source('~/Git/DevDataProd-Project/ui.R')
shiny::runApp('~/Git/DevDataProd-Project')
source('~/Git/DevDataProd-Project/ui.R')
shiny::runApp('~/Git/DevDataProd-Project')
shiny::runApp('~/Git/DevDataProd-Project')
source('~/Git/DevDataProd-Project/ui.R')
shiny::runApp('~/Git/DevDataProd-Project')
shiny::runApp('~/Git/DevDataProd-Project')
shiny::runApp('~/Git/DevDataProd-Project')
shiny::runApp('~/Git/DevDataProd-Project')
shiny::runApp('~/Git/DevDataProd-Project')
shiny::runApp('~/Git/DevDataProd-Project')
source('~/Git/DevDataProd-Project/server.R')
shiny::runApp('~/Git/DevDataProd-Project')
shiny::runApp('~/Git/DevDataProd-Project')
shiny::runApp('~/Git/DevDataProd-Project')
shiny::runApp('~/Git/DevDataProd-Project')
source('~/Git/DevDataProd-Project/ui.R')
shiny::runApp('~/Git/DevDataProd-Project')
source('~/Git/DevDataProd-Project/server.R')
source('~/R/TEST.R')
shiny::runApp('~/Git/DevDataProd-Project')
source('~/Git/DevDataProd-Project/server.R')
shiny::runApp('~/Git/DevDataProd-Project')
?renderPlot
source('~/Git/DevDataProd-Project/server.R')
source('~/Git/DevDataProd-Project/server.R')
shiny::runApp('~/Git/DevDataProd-Project')
library("rCharts", lib.loc="~/R/win-library/3.1")
source('~/Git/DevDataProd-Project/server.R')
source('~/Git/DevDataProd-Project/server.R')
source('~/Git/DevDataProd-Project/server.R')
source('~/Git/DevDataProd-Project/ui.R')
?rPlot
source('~/Git/DevDataProd-Project/server.R')
source('~/Git/DevDataProd-Project/server.R')
shiny::runApp('~/Git/DevDataProd-Project')
source('~/Git/DevDataProd-Project/ui.R')
shiny::runApp('~/Git/DevDataProd-Project')
source('~/Git/DevDataProd-Project/ui.R')
source('~/Git/DevDataProd-Project/server.R')
shiny::runApp('~/Git/DevDataProd-Project')
source('~/Git/DevDataProd-Project/ui.R')
shiny::runApp('~/Git/DevDataProd-Project')
source('~/Git/DevDataProd-Project/server.R')
shiny::runApp('~/Git/DevDataProd-Project')
?renderChart
renderPlot
?renderPlot
source('~/Git/DevDataProd-Project/server.R')
shiny::runApp('~/Git/DevDataProd-Project')
source('~/Git/DevDataProd-Project/server.R')
shiny::runApp('~/Git/DevDataProd-Project')
source('~/Git/DevDataProd-Project/server.R')
shiny::runApp('~/Git/DevDataProd-Project')
source('~/Git/DevDataProd-Project/server.R')
shiny::runApp('~/Git/DevDataProd-Project')
source('~/Git/DevDataProd-Project/server.R')
shiny::runApp('~/Git/DevDataProd-Project')
rPlot(mpg ~ hp, data=dataset, type="point", color="species")
dataset
rPlot(dataset$hp, dataset$mpg)
rPlot(dataset$hp, dataset$mpg, data=dataset)
rPlot(hp, mpg, data=dataset)
rPlot(1:3, 1:4, data=dataset)
renderChart(rPlot(mpg ~ hp, data=dataset, type="point", color="species"))
renderChart(rPlot(mpg ~ hp, data=dataset, type="point", color="species"))
renderChart({
rPlot("SepalLength", "SepalWidth", data=iris, color="Species", facet="Species", type='point')
})
rPlot("SepalLength", "SepalWidth", data=iris, color="Species", facet="Species", type='point')
source('~/Git/DevDataProd-Project/server.R')
shiny::runApp('~/Git/DevDataProd-Project')
shiny::runApp('~/Git/DevDataProd-Project')
source('~/Git/DevDataProd-Project/server.R')
shiny::runApp('~/Git/DevDataProd-Project')
r1 <- rPlot(mpg ~ wt | am + vs, data = mtcars, type = "point", color = "gear")
r1$print("chart1")
rPlot(mpg ~ wt | am + vs, data = mtcars, type = "point", color = "gear")
rPlot(mpg ~ hp, data = dataset, type = "point", color = "gear")
rPlot(mpg ~ hp, data = mtcars, type = "point", color = "gear")
?rPlot
rPlot(dataset$mpg ~ dataset$hp, data = dataset, type = "point", color = "gear")
dataset
dataset
mtcars
attributes(dataset)
attributes(mtcars)
rPlot(dataset$mpg ~ dataset$hp, data=mtcars, type = "point", color = "gear")
?data
newdata = mtcars
save(newdata, file="newdata.rda")
getwd()
load("newdata.rda")
newdata
source('~/Git/DevDataProd-Project/server.R')
source('~/Git/DevDataProd-Project/server.R')
source('~/Git/DevDataProd-Project/server.R')
source('~/Git/DevDataProd-Project/server.R')
shiny::runApp('~/Git/DevDataProd-Project')
source('~/Git/DevDataProd-Project/server.R')
source('~/Git/DevDataProd-Project/server.R')
source('~/Git/DevDataProd-Project/server.R')
source('~/Git/DevDataProd-Project/server.R')
shiny::runApp('~/Git/DevDataProd-Project')
shiny::runApp('~/Git/DevDataProd-Project')
source('~/Git/DevDataProd-Project/server.R')
shiny::runApp('~/Git/DevDataProd-Project')
rPlot(mpg ~ hp, data=mtcars, type="point", color="species")
rPlot(input$x, input$y, data = iris, color = "Species", facet = "Species", type = ’point’)
rPlot("SepalLength", "SepalWidth", data = iris, color = "Species", facet = "Species", type = ’point’)
rPlot("SepalLength", "SepalWidth", data=iris, color="Species", facet="Species", type=’point’)
iris
rPlot("Sepal.Length", "Sepal.Width", data=iris, color="Species", facet="Species", type=’point’)
rPlot("SepalLength", "SepalWidth", data=iris, color="Species", facet="Species", type=’point’)
rPlot(mpg ~ wt, data = mtcars, type = ’point’)
rPlot(mpg ~ wt, data = mtcars, type = "point")
rPlot("SepalLength", "SepalWidth", data=iris, color="Species", facet="Species", type="point")
rPlot("Sepal.Length", "Sepal.Width", data=iris, color="Species", facet="Species", type="point")
shiny::runApp('~/Git/DevDataProd-Project')
rPlot(mpg ~ wt, data = mtcars, type = "point")
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
names(iris) = gsub("\\.", "", names(iris))
rPlot(SepalLength ~ SepalWidth | Species, data = iris, color = 'Species', type = 'point')
rPlot(mpg ~ hp, data=mtcars, type="point", color="species")
rPlot(mpg ~ hp, data=dataset, type="point", color="species")
mtcars
rPlot(cyl ~ hp, data=mtcars, type="point", color="species")
rPlot(mpg ~ wt | am + vs, data = mtcars, type = "point", color = "gear")
rPlot(cyl ~ hp, data=mtcars, type="point")
rPlot(mpg ~ hp, data=mtcars, type="point")
rPlot(mpg ~ hp, data=dataset, type="point")
source('~/Git/DevDataProd-Project/server.R')
shiny::runApp('~/Git/DevDataProd-Project')
source('~/Git/DevDataProd-Project/server.R')
shiny::runApp('~/Git/DevDataProd-Project')
rPlot(mpg ~ hp, data=dataset, type="point")
source('~/Git/DevDataProd-Project/server.R')
shiny::runApp('~/Git/DevDataProd-Project')
shiny::runApp('~/Git/DevDataProd-Project')
source('~/Git/DevDataProd-Project/server.R')
source('~/Git/DevDataProd-Project/ui.R')
source('~/Git/DevDataProd-Project/ui.R')
shiny::runApp('~/Git/DevDataProd-Project')
source('~/Git/DevDataProd-Project/ui.R')
shiny::runApp('~/Git/DevDataProd-Project')
rPlot(mpg ~ hp, data=mtcars, type="point")
source('~/Git/DevDataProd-Project/server.R')
shiny::runApp('~/Git/DevDataProd-Project')
shiny::runApp('~/Git/DevDataProd-Project')
source('~/Git/DevDataProd-Project/server.R')
source('~/Git/DevDataProd-Project/server.R')
shiny::runApp('~/Git/DevDataProd-Project')
source('~/Git/DevDataProd-Project/server.R')
shiny::runApp('~/Git/DevDataProd-Project')
shiny::runApp('~/Git/DevDataProd-Project')
source('~/Git/DevDataProd-Project/server.R')
shiny::runApp('~/Git/DevDataProd-Project')
source('~/Git/DevDataProd-Project/server.R')
shiny::runApp('~/Git/DevDataProd-Project')
?rPlot
source('~/Git/DevDataProd-Project/server.R')
source('~/Git/DevDataProd-Project/server.R')
source('~/Git/DevDataProd-Project/server.R')
shiny::runApp('~/Git/DevDataProd-Project')
source('~/Git/DevDataProd-Project/server.R')
shiny::runApp('~/Git/DevDataProd-Project')
source('~/Git/DevDataProd-Project/server.R')
shiny::runApp('~/Git/DevDataProd-Project')
shiny::runApp('~/Git/DevDataProd-Project')
shiny::runApp('~/Git/DevDataProd-Project')
shiny::runApp('~/Git/DevDataProd-Project')
shiny::runApp('~/Git/DevDataProd-Project')
shiny::runApp('~/Git/DevDataProd-Project')
shiny::runApp('~/Git/DevDataProd-Project')
shiny::runApp('~/Git/DevDataProd-Project')
shiny::runApp('~/Git/DevDataProd-Project')
source('~/Git/DevDataProd-Project/server.R')
shiny::runApp('~/Git/DevDataProd-Project')
shiny::runApp('~/Git/DevDataProd-Project')
shiny::runApp('~/Git/DevDataProd-Project')
shiny::runApp('~/Git/DevDataProd-Project')
shiny::runApp('~/Git/DevDataProd-Project')
shiny::runApp('~/Git/DevDataProd-Project')
shiny::runApp('~/Git/DevDataProd-Project')
shiny::runApp('~/Git/DevDataProd-Project')
shiny::runApp('~/Git/DevDataProd-Project')
shiny::runApp('~/Git/DevDataProd-Project')
shiny::runApp('~/Git/DevDataProd-Project')
